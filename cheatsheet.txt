**********************************
*** 00_02 What You Should Know ***
**********************************

https://guide.bash.academy

https://github.com/LinkedInLearning/docker-networking-creating-managing-and-troubleshooting-container-networks-2023439.git

**********************************************
*** 01_03 Basic Docker Networking Commands ***
**********************************************

docker network create my_network

docker network ls

docker run --name my_nginx --network my_network -d -p 8080:80 nginx

docker network connect my_network my_nginx

docker network disconnect my_network my_nginx

docker network inspect my_network

docker network rm my_network

docker network ls

****************************************************
*** 02_02 Overview of Other Docker Network Types ***
****************************************************

https://docs.docker.com

********************************************
*** 02_03 Docker Network Types in Action ***
********************************************

docker run -d --name database -e POSTGRES_PASSWORD=example postgres:latest

docker run -d --name backend -e DATABASE_URL=postgres://database:5432/mydb tiangolo/uwsgi-nginx-flask:python3.8

docker run -d --name frontend -p 8080:80 nginx:latest

docker network ls

docker network inspect bridge

docker swarm init

docker network create --driver overlay my_overlay_net

docker network ls

docker service create --name database --network my_overlay_net --env POSTGRES_PASSWORD=example postgres:latest

docker service create --name backend --network my_overlay_net --env DATABASE_URL=postgres://database:5432/mydb tiangolo/uwsgi-nginx-flask:python3.8

docker service create --name frontend --network my_overlay_net -p 8080:80 nginx:latest

docker network inspect my_overlay_net

docker service rm frontend 

docker service rm backend 

docker service rm database

docker swarm leave --force

docker network create --driver macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 macvlan_network

docker network ls

docker run -d --name db --network macvlan_network --ip 192.168.1.10 --env POSTGRES_PASSWORD=example postgres:latest

docker run -d --name backend --network macvlan_network --ip 192.168.1.20 --env DATABASE_URL=postgres://database:5432/mydb tiangolo/uwsgi-nginx-flask:python3.8

docker network inspect macvlan_network

docker network prune

**********************************************
*** 03_01 Creating a Custom Bridge Network ***
**********************************************

docker network create --help

docker network create --subnet 192.168.1.0/24 custom_bridge

docker run -d --name webserver --network custom_bridge nginx

docker run -d --name dbserver --network custom_bridge --env MYSQL_ROOT_PASSWORD=example mysql

docker run -d --name cache --network custom_bridge redis

docker run -it --network custom_bridge alpine sh

ping dbserver

******************************************
*** 03_02 Managing Network Connections ***
******************************************

docker network create custom_bridge2

docker network connect custom_bridge2 webserver

docker network disconnect custom_bridge2 webserver

docker network ls

docker system prune

docker network rm custom_bridge

docker network ls

******************************************************
*** 04_01 Using Docker DNS for Container Discovery ***
******************************************************

docker network create my_network

docker run -d --name app --network my_network nginx  

docker run -d --name db --network my_network --env MYSQL_ROOT_PASSWORD=example mysql 

docker run -it --network my_network alpine sh

ping db

************************************************
*** 04_03 Connecting Containers with Aliases ***
************************************************

docker network create my_bridge_network

docker run -d --name db --network my_bridge_network --network-alias database --env MYSQL_ROOT_PASSWORD=example mysql  

docker run -d --name app --network my_bridge_network --network-alias frontend nginx

docker run -it --network my_bridge_network alpine sh

ping db

ping database

ping app

ping frontend

****************************************************
*** 04_04 Managing Networks Using Docker Compose ***
****************************************************

- Docker compose file:

services:
  app:
    image: nginx
    networks:
      custom_bridge:
        aliases:
          - frontend

  db:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: test
    networks:
      custom_bridge:
        aliases:
          - database

networks:
  custom_bridge:
    driver: bridge

-----------------------------------------------------

docker compose up -d

docker network inspect dockernetworking_custom_bridge

-----------------------------------------------------
- Docker compose file:

name: myapp

services:
  
  app:
    image: nginx
    networks:
      custom_bridge:
        aliases:
          - frontend

  db:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: test
    networks:
      custom_bridge:
        aliases:
          - database

networks:
  custom_bridge:
    driver: bridge

-----------------------------------------------------

docker compose up -d